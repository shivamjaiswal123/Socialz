generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  username String  @unique
  email    String  @unique
  password String? // only exist for users signing up with credentials otherwise null

  image String?
  bio   String?

  OAuthProvider OAuthProvider?
  OAuthId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follows[] @relation("follower") // users who follows this user
  following Follows[] @relation("following") // users this users follows

  notifications        Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post {
  id       String  @id @default(cuid())
  authorId String
  content  String?
  image    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id       String @id @default(cuid())
  authorId String
  content  String
  postId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId]) // prevents same user liking twice
}

model Follows {
  followerId  String
  followingId String

  createdAt DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String // user who received the notif
  creatorId String // user who created the notif
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum OAuthProvider {
  GOOGLE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
